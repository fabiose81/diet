AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Fargate deployment (us-east-1) of MongoDB + Python Server with EFS, CloudWatch logs, Service Discovery and VPC Endpoints (no NAT Gateway)

Parameters:
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC
  EcrRepository:
    Type: String
    Default: diet
    Description: Name of the ECR repository
  MongoImageTag:
    Type: String
    Default: diet-database-latest
    Description: MongoDB image tag
  ServerImageTag:
    Type: String
    Default: diet-server-latest
    Description: Server image tag

Resources:

  ########################
  # VPC & NETWORKING
  ########################

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: diet-vpc

  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: diet-igw

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyIGW

  # Public subnet (for Python server tasks with public IP)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: diet-public-subnet

  # Private subnet (for MongoDB + EFS + endpoints)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: diet-private-subnet

  ########################
  # Route Tables
  ########################

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: diet-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyIGW

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: diet-private-rt

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  ########################
  # SECURITY GROUPS
  ########################

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to Python server
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: diet-server-sg

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MongoDB access from Server SG only
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref ServerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: diet-db-sg

  MongoEFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow NFS (2049) from Database SG
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref DatabaseSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: diet-efs-sg

  # Security group for VPC Interface Endpoints â€” allow inbound TLS from VPC (private subnet)
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Interface Endpoints (allow ECS tasks to connect)
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: diet-endpoint-sg

  ########################
  # VPC ENDPOINTS (PrivateLink) - no NAT
  ########################

  # ECR API (GetAuthorizationToken) - Interface endpoint
  EcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"
      VpcId: !Ref MyVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: diet-ecr-api-endpoint

  # ECR DKR (pull image layers) - Interface endpoint
  EcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"
      VpcId: !Ref MyVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: diet-ecr-dkr-endpoint

  # CloudWatch Logs endpoint (so tasks in private subnet can send logs) - Interface endpoint
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      VpcId: !Ref MyVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: diet-cwlogs-endpoint

  # S3 Gateway endpoint (ECR uses S3 internally; required to pull images)
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref MyVPC
      RouteTableIds:
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: diet-s3-endpoint

  ########################
  # EFS for MongoDB
  ########################

  MongoEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      LifecyclePolicies:
        - TransitionToIA: AFTER_7_DAYS
      FileSystemTags:
        - Key: Name
          Value: diet-mongo-data

  MongoMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MongoEFS
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref MongoEFSSecurityGroup

  ########################
  # ECS Cluster, IAM Role, Log Groups
  ########################

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: diet-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  MongoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/diet-mongo
      RetentionInDays: 14

  ServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/diet-server
      RetentionInDays: 14

  ########################
  # Service Discovery Namespace
  ########################

  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: local
      Vpc: !Ref MyVPC
      Description: Private DNS namespace for ECS service discovery

  ########################
  # MongoDB Task Definition & Service (in private subnet)
  ########################

  MongoTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: diet-mongo
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: mongodb
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:${MongoImageTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 27017
          MountPoints:
            - ContainerPath: /data/db
              SourceVolume: MongoEFSVolume
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MongoLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: mongodb
      Volumes:
        - Name: MongoEFSVolume
          EFSVolumeConfiguration:
            FileSystemId: !Ref MongoEFS
            TransitEncryption: ENABLED

  MongoServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: mongodb
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1

  MongoService:
    Type: AWS::ECS::Service
    DependsOn: MongoMountTarget
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: mongo-service
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref MongoTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref DatabaseSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
      ServiceRegistries:
        - RegistryArn: !GetAtt MongoServiceDiscovery.Arn

  ########################
  # Python Server Task Definition & Service (public subnet)
  ########################

  ServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: diet-server
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: diet-server
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:${ServerImageTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: DATABASE_HOST
              Value: mongodb.local
            - Name: DATABASE_PORT
              Value: "27017"
            - Name: DATABASE
              Value: diet
            - Name: SERVER_PORT
              Value: "5000"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ServerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: server

  ServerService:
    Type: AWS::ECS::Service
    DependsOn:
      - MongoService
      - MongoMountTarget
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: server-service
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref ServerTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServerSecurityGroup
          Subnets:
            - !Ref PublicSubnet1

Outputs:
  ClusterName:
    Description: Name of ECS Cluster
    Value: !Ref ECSCluster
  MongoServiceName:
    Description: MongoDB ECS Service
    Value: !Ref MongoService
  ServerServiceName:
    Description: Python Server ECS Service
    Value: !Ref ServerService
  ServerPublicAccess:
    Description: Info
    Value: "Public IP assigned to Python server task (see Service ENI in ECS console)"